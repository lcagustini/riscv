// Approximation modeling declaration
DM Float2HalfPrecision(); 
IM EvoApprox8B(word a, word b, word r, int mul, bool signa, bool signb, bool high);

// Energy models
EM simple_em(); 

// Operating parameters
OP default_op  = {scaling   = 1.0000};
OP mul8_303_op = {scaling   = 0.9568};
OP mul8_469_op = {scaling   = 0.7919};
OP mul8_479_op = {scaling   = 0.7005};
OP mul8_423_op = {scaling   = 0.4997};
OP mul8_279_op = {scaling   = 0.3930};
OP half_fp_op  = {scaling   = 0.7000};

// Default energy model and operating parameters
energy=simple_em(); 
parameters=default_op;

// Instruction groups
group FP { // Single-Precision Floating-Point 
    instruction = {
        FADD.S,
        FSUB.S,
        FMUL.S,
        FDIV.S,
        FMIN.S,
        FMAX.S,
        FSQRT.S,
        FMADD.S,
        FMSUB.S,
        FNMSUB.S,
        FNMADD.S
            //FSGNJ.S,
            //FSGNJN.S,
            //FSGNJX.S
    };
}

group FP_RD { // Single-Precision Floating-Point, read only
    instruction = {
        FSW,
        FCVT.W.S,
        FCVT.WU.S,
        //FMV.X.W,
        FLT.S,
        FLE.S,
        FEQ.S
            //FCLASS.S
    };
}

group FP_WR { // Single-Precision Floating-Point, write only
    instruction = {
        FLW,
        FCVT.S.W
            //FCVT.S.WU,
            //FMV.W.X
    };
}

approximation HALF_PRECISION {
    initial=off;
    group FP {
        regbank_read=Float2HalfPrecision();
        regbank_write=Float2HalfPrecision();
        parameters=half_fp_op;
    }
    group FP_RD {
        regbank_read=Float2HalfPrecision();
        parameters=half_fp_op;
    }
    group FP_WR {
        regbank_write=Float2HalfPrecision();
        parameters=half_fp_op;
    }
}

approximation MUL8_303 {
    initial=off;
    instruction MUL {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 303, true, true, false);
        parameters = mul8_303_op;
    }
    instruction MULH {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 303, true, true, true);
        parameters = mul8_303_op;
    }
    instruction MULHU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 303, false, false, true);
        parameters = mul8_303_op;
    }
    instruction MULHSU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 303, true, false, true);
        parameters = mul8_303_op;
    }
}

approximation MUL8_469 {
    initial=off;
    instruction MUL {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 469, true, true, false);
        parameters = mul8_469_op;
    }
    instruction MULH {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 469, true, true, true);
        parameters = mul8_469_op;
    }
    instruction MULHU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 469, false, false, true);
        parameters = mul8_469_op;
    }
    instruction MULHSU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 469, true, false, true);
        parameters = mul8_469_op;
    }
}

approximation MUL8_479 {
    initial=off;
    instruction MUL {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 479, true, true, false);
        parameters = mul8_479_op;
    }
    instruction MULH {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 479, true, true, true);
        parameters = mul8_479_op;
    }
    instruction MULHU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 479, false, false, true);
        parameters = mul8_479_op;
    }
    instruction MULHSU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 479, true, false, true);
        parameters = mul8_479_op;
    }
}

approximation MUL8_423 {
    initial=off;
    instruction MUL {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 423, true, true, false);
        parameters = mul8_423_op;
    }
    instruction MULH {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 423, true, true, true);
        parameters = mul8_423_op;
    }
    instruction MULHU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 423, false, false, true);
        parameters = mul8_423_op;
    }
    instruction MULHSU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 423, true, false, true);
        parameters = mul8_423_op;
    }
}

approximation MUL8_279 {
    initial=off;
    instruction MUL {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 279, true, true, false);
        parameters = mul8_279_op;
    }
    instruction MULH {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 279, true, true, true);
        parameters = mul8_279_op;
    }
    instruction MULHU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 279, false, false, true);
        parameters = mul8_279_op;
    }
    instruction MULHSU {
        alt_behavior = EvoApprox8B(RB[rs1], RB[rs2], RB[rd], 279, true, false, true);
        parameters = mul8_279_op;
    }
}
