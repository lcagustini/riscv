/******************************************************
 * Architecture Module header file.                   *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef  _RISCV_H
#define  _RISCV_H

#include "riscv_parms.H"
#include "systemc.h"
#include "ac_module.H"
#include "ac_utils.H"
#include "ac_hltrace.H"
#include "riscv_arch.H"
#include "riscv_isa.H"


class riscv: public ac_module, public riscv_arch {
private:
  typedef struct {
    uint8_t funct7;
    uint8_t funct5;
    uint8_t aq;
    uint8_t rl;
    uint8_t rs2;
    uint8_t rs1;
    uint8_t funct3;
    uint8_t rd;
    uint8_t op;
  } T_Type_R;

  typedef struct {
    uint8_t rs3;
    uint8_t funct2;
    uint8_t rs2;
    uint8_t rs1;
    uint8_t funct3;
    uint8_t rd;
    uint8_t op;
  } T_Type_R4;

  typedef struct {
    uint8_t imm4;
    uint8_t imm3;
    uint8_t imm2;
    uint8_t imm1;
    uint8_t imm8;
    uint8_t imm7;
    uint8_t imm6;
    uint16_t csr;
    uint8_t rs1;
    uint8_t funct3;
    uint8_t rd;
    uint8_t op;
  } T_Type_I;

  typedef struct {
    uint8_t imm4;
    uint8_t imm3;
    uint8_t rs2;
    uint8_t rs1;
    uint8_t funct3;
    uint8_t imm2;
    uint8_t imm1;
    uint8_t op;
  } T_Type_S;

  typedef struct {
    uint8_t imm4;
    uint8_t imm2;
    uint8_t rs2;
    uint8_t rs1;
    uint8_t funct3;
    uint8_t imm1;
    uint8_t imm3;
    uint8_t op;
  } T_Type_SB;

  typedef struct {
    uint32_t imm;
    uint8_t rd;
    uint8_t op;
  } T_Type_U;

  typedef struct {
    uint8_t imm4;
    uint16_t imm1;
    uint8_t imm2;
    uint8_t imm3;
    uint8_t rd;
    uint8_t op;
  } T_Type_UJ;

  typedef struct {
    bool valid;
    void* end_rot;
    unsigned id;
    union {
      T_Type_R F_Type_R;
      T_Type_R4 F_Type_R4;
      T_Type_I F_Type_I;
      T_Type_S F_Type_S;
      T_Type_SB F_Type_SB;
      T_Type_U F_Type_U;
      T_Type_UJ F_Type_UJ;
    };
  } DecCacheItem ;

  sc_time time_1cycle;

public:

  bool has_delayed_load;
  char* delayed_load_program;
  riscv_parms::riscv_isa ISA;
  //!Address of Interpretation Routines.
  void** IntRoutine;

  DecCacheItem* DEC_CACHE;
  DecCacheItem* instr_dec;
  bool start_up;

  //!Dispatch Method.
  inline __attribute__((always_inline)) void* dispatch();

  //!Behavior execution method.
  void behavior();

  SC_HAS_PROCESS( riscv );

  sc_event wake;

  //!Constructor.
  riscv( sc_module_name name_ ): ac_module(name_), riscv_arch(), ISA(*this) {
    SC_THREAD( behavior );
    sensitive << wake;
    has_delayed_load = false; 
    start_up=1;
    ac_id.write(globalId++);
    set_proc_freq(1000/module_period_ns);
  }

  void init_dec_cache() {
    DEC_CACHE = (DecCacheItem*) calloc(sizeof(DecCacheItem), (dec_cache_size));
  }

  void set_proc_freq(unsigned int proc_freq);

  unsigned get_ac_pc();

  void set_ac_pc( unsigned int value );

  virtual void PrintStat();

  void init(int ac, char* av[]);

  void init();

  void set_prog_args();

  void load(char* program);

  void delayed_load(char* program);

  void stop(int status = 0);

  virtual ~riscv() {};

};

#endif  //_RISCV_H

